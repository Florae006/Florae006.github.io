<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>算法模板笔记 - 系列 - Doごみ箱🪄</title><link>http://dodolalorc.cn/series/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF%E7%AC%94%E8%AE%B0/</link><description>算法模板笔记 - 系列 - Doごみ箱🪄</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>chenflora124@gmail.com (DODOLA)</managingEditor><webMaster>chenflora124@gmail.com (DODOLA)</webMaster><copyright>dodola</copyright><lastBuildDate>Wed, 13 Mar 2024 13:29:07 +0800</lastBuildDate><atom:link href="http://dodolalorc.cn/series/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF%E7%AC%94%E8%AE%B0/" rel="self" type="application/rss+xml"/><item><title>线段树讲义||寒假</title><link>http://dodolalorc.cn/posts/segtreelecnote/</link><pubDate>Wed, 13 Mar 2024 13:29:07 +0800</pubDate><author><name>DODOLA</name></author><guid>http://dodolalorc.cn/posts/segtreelecnote/</guid><description><![CDATA[<h2 id="线段树介绍" class="headerLink">
    <a href="#%e7%ba%bf%e6%ae%b5%e6%a0%91%e4%bb%8b%e7%bb%8d" class="header-mark"></a>线段树介绍</h2><ul>
<li>线段树是一棵二叉树，每个节点维护一个区间内$[l,r]$的信息</li>
<li>左子树区间维护$[l,\lfloor \frac{l+r}{2} \rfloor]$的信息，右子树维护$[\lfloor \frac{l+r}{2} \rfloor+1,r]$的信息</li>
<li>节点信息可以由两个子节点合并得到</li>
<li>任意一个区间会被分为线段树上$O(\log n)$个节点</li>
</ul>
<p>线段树可以在$O(\log N)$的时间复杂度内实现<strong>单点修改</strong>、<strong>区间修改</strong>、**区间查询（区间求和/区间最大值/区间最小值）**等操作。</p>]]></description></item><item><title>线段树模板</title><link>http://dodolalorc.cn/posts/seg_tree/</link><pubDate>Sat, 06 Jan 2024 21:53:21 +0800</pubDate><author><name>DODOLA</name></author><guid>http://dodolalorc.cn/posts/seg_tree/</guid><description><![CDATA[<h3 id="线段树segment-tree" class="headerLink">
    <a href="#%e7%ba%bf%e6%ae%b5%e6%a0%91segment-tree" class="header-mark"></a>线段树(segment tree)</h3><p>线段树主要用于维护区间信息，与传统的树状数组相比，可以实现<code>O(log n)</code>的区间修改，还可以同时支持多种操作(加、乘)，更具通用性。</p>]]></description></item><item><title>图论基础||存储图||DFS、BFS(图论)</title><link>http://dodolalorc.cn/posts/graph_basic/</link><pubDate>Sat, 06 Jan 2024 14:15:17 +0800</pubDate><author><name>DODOLA</name></author><guid>http://dodolalorc.cn/posts/graph_basic/</guid><description><![CDATA[<h3 id="11图的定义" class="headerLink">
    <a href="#11%e5%9b%be%e7%9a%84%e5%ae%9a%e4%b9%89" class="header-mark"></a>1.1图的定义</h3><p>上课讲过一大堆这里不再赘述，直接学习代码实现。</p>
<h3 id="12图的存储" class="headerLink">
    <a href="#12%e5%9b%be%e7%9a%84%e5%ad%98%e5%82%a8" class="header-mark"></a>1.2图的存储</h3><p>例图展示：</p>
<pre class="mermaid">graph LR
v1((v1))--4-->v2((v2))
v1((v1))--9-->v6((v6))
v3((v3))--19-->v2((v2))
v3((v3))--22-->v1((v1))
v4((v4))--17-->v3((v3))
v5((v5))--29-->v8((v8))
v6((v6))--12-->v1((v1))
v6((v6))--9-->v5((v5))
v6((v6))--4-->v7((v7))
v7((v7))--25-->v4((v4))
v8((v8))--7-->v7((v7))
v8((v8))--11-->v3((v3))
</pre><p><code>设n个点，m条边</code></p>
<p>上图的数据（按照 起点-终点-权值）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">8 12
</span></span><span class="line"><span class="cl">5 8 29
</span></span><span class="line"><span class="cl">6 1 12
</span></span><span class="line"><span class="cl">8 3 11
</span></span><span class="line"><span class="cl">1 2 4
</span></span><span class="line"><span class="cl">3 1 22
</span></span><span class="line"><span class="cl">4 3 17
</span></span><span class="line"><span class="cl">7 4 25
</span></span><span class="line"><span class="cl">6 5 9
</span></span><span class="line"><span class="cl">8 7 7
</span></span><span class="line"><span class="cl">1 6 9
</span></span><span class="line"><span class="cl">3 2 19
</span></span><span class="line"><span class="cl">6 7 4
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="邻接矩阵" class="headerLink">
    <a href="#%e9%82%bb%e6%8e%a5%e7%9f%a9%e9%98%b5" class="header-mark"></a>邻接矩阵</h4><ul>
<li>遍历效率低、不能存重边、初始化效率低<code>初始化O(n^2)时间，建图O(m)时间</code>、空间开销大<code>O(n^2)</code></li>
<li>对于稀疏图来说大部分是INF，空间利用效率也不高</li>
</ul>
<h4 id="前向星" class="headerLink">
    <a href="#%e5%89%8d%e5%90%91%e6%98%9f" class="header-mark"></a>前向星</h4><p>前向星涉及排序，所以其时间复杂度和排序算法有关，一般情况下时间复杂度为<code>O(mlog m)</code>，空间上需要两个数组（记录边的边数组、记录各点在边数组中起始位置的head数组），空间复杂度为<code>O(m+n)</code></p>]]></description></item><item><title>拓扑排序</title><link>http://dodolalorc.cn/posts/topo/</link><pubDate>Fri, 05 Jan 2024 14:20:41 +0800</pubDate><author><name>DODOLA</name></author><guid>http://dodolalorc.cn/posts/topo/</guid><description><![CDATA[<h2 id="拓扑排序" class="headerLink">
    <a href="#%e6%8b%93%e6%89%91%e6%8e%92%e5%ba%8f" class="header-mark"></a>拓扑排序</h2><p>前提：拓扑排序是对<u>有向无环图</u>来说的，无向图、有环图都不存在拓扑排序。</p>
<p>拓扑排序是将图G中的所有顶点排成一个线性序列，使得对于任意一堆有边顶点&lt;u, v&gt;，在线性序列中，u都出现在v之前。</p>
<p>拓扑排序可以反应某种方案是否是切实可行的。</p>]]></description></item><item><title>字符串匹配问题||前缀函数+KMP+字符串哈希</title><link>http://dodolalorc.cn/posts/string_match/</link><pubDate>Fri, 05 Jan 2024 14:11:58 +0800</pubDate><author><name>DODOLA</name></author><guid>http://dodolalorc.cn/posts/string_match/</guid><description><![CDATA[<h2 id="字符串匹配算法" class="headerLink">
    <a href="#%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%8c%b9%e9%85%8d%e7%ae%97%e6%b3%95" class="header-mark"></a>字符串匹配算法</h2><h3 id="暴力做法bf" class="headerLink">
    <a href="#%e6%9a%b4%e5%8a%9b%e5%81%9a%e6%b3%95bf" class="header-mark"></a>暴力做法(BF)</h3><p>简称BF(Brute Force)算法。</p>
<p>没什么好说的，就是看到描述直接能想到的朴素做法。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">BF_match</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">,</span> <span class="n">string</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// s是主串，p是模式串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">m</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">m</span><span class="p">)</span> <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>BF算法的时间复杂度不稳定。匹配成功时，最好为<code>O(n)</code>，最差为<code>O(mn)</code>；匹配失败时，最好为最好为<code>O(n)</code>，最差为<code>O(mn)</code>。平均时间复杂度为<code>O(n)</code>。</p>]]></description></item><item><title>最短路问题（Dijkstra + SPFA + Floyd）</title><link>http://dodolalorc.cn/posts/shortest_path/</link><pubDate>Sat, 23 Dec 2023 16:08:47 +0800</pubDate><author><name>DODOLA</name></author><guid>http://dodolalorc.cn/posts/shortest_path/</guid><description><![CDATA[<h3 id="思维先行" class="headerLink">
    <a href="#%e6%80%9d%e7%bb%b4%e5%85%88%e8%a1%8c" class="header-mark"></a>思维先行</h3><p>我们要找某点到某点的最短路径(记为点u到点v)，这样的路径只能从两种路径中选择——</p>
<ol>
<li>u和v之间有边连接时，存在边(u, v)，不存在的话可以视作这两点的距离无限大</li>
<li>u和v可以通过某些点中转相连，这个(最短的)中转路径</li>
</ol>
<p>很明显，我们选最短路径肯定是在这两种路径当中选最短的来作为u和v的最短距离，而路径选择2又可以不断拆分，比如我们有<code>u -&gt; P -&gt; v</code>我们再去寻找这条路径的最短时，可以分为<code>u -&gt; P</code>最短+<code>P -&gt; v</code>最短，再去寻找中转点&hellip;而且每次取最小值最小的+最小的肯定得最小的（有一点贪心的感觉）。</p>]]></description></item></channel></rss>